# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import os
import pandas as pd
import joblib
import telebot
from telebot import types

from dotenv import load_dotenv

load_dotenv()


# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
MAX_MESSAGE_LENGTH = 2000

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
data_dir = './data'
dataset = pd.read_csv(f'{data_dir}/full_dataset.csv', index_col=False)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞–π–∑–µ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
vectorizer = joblib.load('./model/tfidf_vectorizer.joblib')
model = joblib.load('./model/nearest_neighbors_model.joblib')

# –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
X = vectorizer.transform(dataset['Quest'])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
TOKEN = os.environ.get('TOKEN')
bot = telebot.TeleBot(TOKEN)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ chat_id)
user_results = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–∏
def split_message(text, max_length=MAX_MESSAGE_LENGTH):
    if len(text) <= max_length:
        return [text]
    parts = []
    while text:
        if len(text) <= max_length:
            parts.append(text)
            break
        split_pos = text[:max_length].rfind('\n')
        if split_pos == -1 or split_pos < max_length // 2:
            split_pos = text[:max_length].rfind(' ')
        if split_pos == -1:
            split_pos = max_length
        parts.append(text[:split_pos])
        text = text[split_pos:].lstrip()
    return parts


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def find_closest_matches(query, max_results=5, distance_threshold=0.7):
    query = query.strip().lower()  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
    query_vec = vectorizer.transform([query])  # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞

    # –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    distances, indices = model.kneighbors(query_vec, n_neighbors=max_results)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    results = []
    for idx, dist in zip(indices[0], distances[0]):
        if dist <= distance_threshold:
            results.append({
                'Quest': dataset.iloc[idx]['Quest'],
                'Answer': dataset.iloc[idx]['Ans'],
                'URL': dataset.iloc[idx]['URL'],
                'Department': dataset.iloc[idx]['Department'],
                'Distance': dist
            })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
    results = sorted(results, key=lambda x: x['Distance'])
    return results


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    markup.add(btn1)
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                     reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@bot.message_handler(func=lambda msg: msg.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
def ask_question(message):
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")
    bot.register_next_step_handler(msg, process_question)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def process_question(message):
    user_query = message.text
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É
        matches = find_closest_matches(user_query, max_results=5)

        if not matches:
            # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
            return

        # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–ª–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        best_match = matches[0]
        user_results[message.chat.id] = matches  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ chat_id

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–û—Ç–≤–µ—Ç")
        btn2 = types.KeyboardButton("–û—Ç–¥–µ–ª")
        btn3 = types.KeyboardButton("URL")
        btn4 = types.KeyboardButton("–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
        markup.add(btn1, btn2, btn3, btn4)

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
        bot.send_message(message.chat.id,
                         "–ù–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
                         reply_markup=markup)

    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç", "–û—Ç–¥–µ–ª", "URL", "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"
@bot.message_handler(func=lambda msg: msg.text in ["–û—Ç–≤–µ—Ç", "–û—Ç–¥–µ–ª", "URL", "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"])
def handle_choice(message):
    chat_id = message.chat.id

    if chat_id not in user_results:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'. (/start)")
        return

    matches = user_results[chat_id]

    if message.text == "–û—Ç–≤–µ—Ç":
        response = ""
        for i, match in enumerate(matches, start=1):
            response += f"üî∏ <strong>–í–æ–ø—Ä–æ—Å {i}:</strong>\n{match['Quest']}\n\n"
            response += f"<strong>–û—Ç–≤–µ—Ç:</strong>\n{match['Answer']}\n\n"
        parts = split_message(response, MAX_MESSAGE_LENGTH)
        for part in parts:
            bot.send_message(chat_id, part, parse_mode='HTML')

    elif message.text == "–û—Ç–¥–µ–ª":
        department = matches[0]['Department']
        bot.send_message(chat_id, f"–û—Ç–¥–µ–ª: {department}")

    elif message.text == "URL":
        url = matches[0]['URL']
        bot.send_message(chat_id, f"–°—Å—ã–ª–∫–∞: {url}")

    elif message.text == "–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å":
        ask_question(message)


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()
